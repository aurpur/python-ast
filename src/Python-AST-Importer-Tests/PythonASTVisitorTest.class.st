Class {
	#name : #PythonASTVisitorTest,
	#superclass : #TestCase,
	#category : #'Python-AST-Importer-Tests-visitor'
}

{ #category : #parsing }
PythonASTVisitorTest >> parse: jsonCode [

	| visitor |
	visitor := PythonASTVisitor new.

	visitor visitJsonEntity: (NeoJSONReader fromString: jsonCode).

	^ visitor model
]

{ #category : #parsing }
PythonASTVisitorTest >> testVisitAlias [

	| model imports |
	model := self parse:
		         '{ "_type": "Module", "body": [ { "_type": "ImportFrom", "col_offset": 0, "end_col_offset": 35, "end_lineno": 1, "level": 0, "lineno": 1, "module": "keras.models", "names": [ { "_type": "alias", "asname": null, "col_offset": 25, "end_col_offset": 35, "end_lineno": 1, "lineno": 1, "name": "Sequential" } ] }, { "_type": "ImportFrom", "col_offset": 0, "end_col_offset": 30, "end_lineno": 2, "level": 0, "lineno": 2, "module": "keras.layers", "names": [ { "_type": "alias", "asname": null, "col_offset": 25, "end_col_offset": 30, "end_lineno": 2, "lineno": 2, "name": "Dense" } ] }, { "_type": "ImportFrom", "col_offset": 0, "end_col_offset": 52, "end_lineno": 3, "level": 0, "lineno": 3, "module": "keras.layers.convolutional", "names": [ { "_type": "alias", "asname": null, "col_offset": 39, "end_col_offset": 52, "end_lineno": 3, "lineno": 3, "name": "Convolution2D" } ] }, { "_type": "ImportFrom", "col_offset": 0, "end_col_offset": 51, "end_lineno": 4, "level": 0, "lineno": 4, "module": "keras.layers.convolutional", "names": [ { "_type": "alias", "asname": null, "col_offset": 39, "end_col_offset": 51, "end_lineno": 4, "lineno": 4, "name": "MaxPooling2D" } ] }, { "_type": "Assign", "col_offset": 0, "end_col_offset": 29, "end_lineno": 6, "lineno": 6, "targets": [ { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Store" }, "end_col_offset": 15, "end_lineno": 6, "id": "input_img_shape", "lineno": 6 } ], "type_comment": null, "value": { "_type": "Tuple", "col_offset": 18, "ctx": { "_type": "Load" }, "dims": [ { "_type": "Constant", "col_offset": 19, "end_col_offset": 20, "end_lineno": 6, "kind": null, "lineno": 6, "n": 1, "s": 1, "value": 1 }, { "_type": "Constant", "col_offset": 22, "end_col_offset": 24, "end_lineno": 6, "kind": null, "lineno": 6, "n": 28, "s": 28, "value": 28 }, { "_type": "Constant", "col_offset": 26, "end_col_offset": 28, "end_lineno": 6, "kind": null, "lineno": 6, "n": 28, "s": 28, "value": 28 } ], "elts": [ { "_type": "Constant", "col_offset": 19, "end_col_offset": 20, "end_lineno": 6, "kind": null, "lineno": 6, "n": 1, "s": 1, "value": 1 }, { "_type": "Constant", "col_offset": 22, "end_col_offset": 24, "end_lineno": 6, "kind": null, "lineno": 6, "n": 28, "s": 28, "value": 28 }, { "_type": "Constant", "col_offset": 26, "end_col_offset": 28, "end_lineno": 6, "kind": null, "lineno": 6, "n": 28, "s": 28, "value": 28 } ], "end_col_offset": 29, "end_lineno": 6, "lineno": 6 } }, { "_type": "Assign", "col_offset": 0, "end_col_offset": 20, "end_lineno": 7, "lineno": 7, "targets": [ { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Store" }, "end_col_offset": 5, "end_lineno": 7, "id": "model", "lineno": 7 } ], "type_comment": null, "value": { "_type": "Call", "args": [], "col_offset": 8, "end_col_offset": 20, "end_lineno": 7, "func": { "_type": "Name", "col_offset": 8, "ctx": { "_type": "Load" }, "end_col_offset": 18, "end_lineno": 7, "id": "Sequential", "lineno": 7 }, "keywords": [], "lineno": 7 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 29, "end_lineno": 15, "lineno": 12, "value": { "_type": "Call", "args": [ { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 24, "end_col_offset": 26, "end_lineno": 12, "kind": null, "lineno": 12, "n": 15, "s": 15, "value": 15 }, { "_type": "Constant", "col_offset": 28, "end_col_offset": 29, "end_lineno": 12, "kind": null, "lineno": 12, "n": 7, "s": 7, "value": 7 }, { "_type": "Constant", "col_offset": 31, "end_col_offset": 32, "end_lineno": 12, "kind": null, "lineno": 12, "n": 7, "s": 7, "value": 7 } ], "col_offset": 10, "end_col_offset": 28, "end_lineno": 15, "func": { "_type": "Name", "col_offset": 10, "ctx": { "_type": "Load" }, "end_col_offset": 23, "end_lineno": 12, "id": "Convolution2D", "lineno": 12 }, "keywords": [ { "_type": "keyword", "arg": "activation", "col_offset": 0, "end_col_offset": 17, "end_lineno": 13, "lineno": 13, "value": { "_type": "Constant", "col_offset": 11, "end_col_offset": 17, "end_lineno": 13, "kind": null, "lineno": 13, "n": "relu", "s": "relu", "value": "relu" } }, { "_type": "keyword", "arg": "border_mode", "col_offset": 0, "end_col_offset": 18, "end_lineno": 14, "lineno": 14, "value": { "_type": "Constant", "col_offset": 12, "end_col_offset": 18, "end_lineno": 14, "kind": null, "lineno": 14, "n": "same", "s": "same", "value": "same" } }, { "_type": "keyword", "arg": "input_shape", "col_offset": 0, "end_col_offset": 27, "end_lineno": 15, "lineno": 15, "value": { "_type": "Name", "col_offset": 12, "ctx": { "_type": "Load" }, "end_col_offset": 27, "end_lineno": 15, "id": "input_img_shape", "lineno": 15 } } ], "lineno": 12 } ], "col_offset": 0, "end_col_offset": 29, "end_lineno": 15, "func": { "_type": "Attribute", "attr": "add", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 9, "end_lineno": 12, "lineno": 12, "value": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 12, "id": "model", "lineno": 12 } }, "keywords": [], "lineno": 12 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 39, "end_lineno": 16, "lineno": 16, "value": { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 6, "end_col_offset": 18, "end_lineno": 16, "kind": null, "lineno": 16, "n": "C1 shape: ", "s": "C1 shape: ", "value": "C1 shape: " }, { "_type": "Attribute", "attr": "output_shape", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 38, "end_lineno": 16, "lineno": 16, "value": { "_type": "Name", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 25, "end_lineno": 16, "id": "model", "lineno": 16 } } ], "col_offset": 0, "end_col_offset": 39, "end_lineno": 16, "func": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 16, "id": "print", "lineno": 16 }, "keywords": [], "lineno": 16 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 50, "end_lineno": 19, "lineno": 19, "value": { "_type": "Call", "args": [ { "_type": "Call", "args": [ { "_type": "Tuple", "col_offset": 23, "ctx": { "_type": "Load" }, "dims": [ { "_type": "Constant", "col_offset": 24, "end_col_offset": 25, "end_lineno": 19, "kind": null, "lineno": 19, "n": 2, "s": 2, "value": 2 }, { "_type": "Constant", "col_offset": 26, "end_col_offset": 27, "end_lineno": 19, "kind": null, "lineno": 19, "n": 2, "s": 2, "value": 2 } ], "elts": [ { "_type": "Constant", "col_offset": 24, "end_col_offset": 25, "end_lineno": 19, "kind": null, "lineno": 19, "n": 2, "s": 2, "value": 2 }, { "_type": "Constant", "col_offset": 26, "end_col_offset": 27, "end_lineno": 19, "kind": null, "lineno": 19, "n": 2, "s": 2, "value": 2 } ], "end_col_offset": 28, "end_lineno": 19, "lineno": 19 } ], "col_offset": 10, "end_col_offset": 49, "end_lineno": 19, "func": { "_type": "Name", "col_offset": 10, "ctx": { "_type": "Load" }, "end_col_offset": 22, "end_lineno": 19, "id": "MaxPooling2D", "lineno": 19 }, "keywords": [ { "_type": "keyword", "arg": "border_mode", "col_offset": 30, "end_col_offset": 48, "end_lineno": 19, "lineno": 19, "value": { "_type": "Constant", "col_offset": 42, "end_col_offset": 48, "end_lineno": 19, "kind": null, "lineno": 19, "n": "same", "s": "same", "value": "same" } } ], "lineno": 19 } ], "col_offset": 0, "end_col_offset": 50, "end_lineno": 19, "func": { "_type": "Attribute", "attr": "add", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 9, "end_lineno": 19, "lineno": 19, "value": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 19, "id": "model", "lineno": 19 } }, "keywords": [], "lineno": 19 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 39, "end_lineno": 20, "lineno": 20, "value": { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 6, "end_col_offset": 18, "end_lineno": 20, "kind": null, "lineno": 20, "n": "S2 shape: ", "s": "S2 shape: ", "value": "S2 shape: " }, { "_type": "Attribute", "attr": "output_shape", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 38, "end_lineno": 20, "lineno": 20, "value": { "_type": "Name", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 25, "end_lineno": 20, "id": "model", "lineno": 20 } } ], "col_offset": 0, "end_col_offset": 39, "end_lineno": 20, "func": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 20, "id": "print", "lineno": 20 }, "keywords": [], "lineno": 20 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 20, "end_lineno": 26, "lineno": 24, "value": { "_type": "Call", "args": [ { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 24, "end_col_offset": 27, "end_lineno": 24, "kind": null, "lineno": 24, "n": 250, "s": 250, "value": 250 }, { "_type": "Constant", "col_offset": 29, "end_col_offset": 30, "end_lineno": 24, "kind": null, "lineno": 24, "n": 5, "s": 5, "value": 5 }, { "_type": "Constant", "col_offset": 32, "end_col_offset": 33, "end_lineno": 24, "kind": null, "lineno": 24, "n": 5, "s": 5, "value": 5 } ], "col_offset": 10, "end_col_offset": 19, "end_lineno": 26, "func": { "_type": "Name", "col_offset": 10, "ctx": { "_type": "Load" }, "end_col_offset": 23, "end_lineno": 24, "id": "Convolution2D", "lineno": 24 }, "keywords": [ { "_type": "keyword", "arg": "activation", "col_offset": 0, "end_col_offset": 17, "end_lineno": 25, "lineno": 25, "value": { "_type": "Constant", "col_offset": 11, "end_col_offset": 17, "end_lineno": 25, "kind": null, "lineno": 25, "n": "relu", "s": "relu", "value": "relu" } }, { "_type": "keyword", "arg": "border_mode", "col_offset": 0, "end_col_offset": 18, "end_lineno": 26, "lineno": 26, "value": { "_type": "Constant", "col_offset": 12, "end_col_offset": 18, "end_lineno": 26, "kind": null, "lineno": 26, "n": "same", "s": "same", "value": "same" } } ], "lineno": 24 } ], "col_offset": 0, "end_col_offset": 20, "end_lineno": 26, "func": { "_type": "Attribute", "attr": "add", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 9, "end_lineno": 24, "lineno": 24, "value": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 24, "id": "model", "lineno": 24 } }, "keywords": [], "lineno": 24 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 39, "end_lineno": 27, "lineno": 27, "value": { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 6, "end_col_offset": 18, "end_lineno": 27, "kind": null, "lineno": 27, "n": "C5 shape: ", "s": "C5 shape: ", "value": "C5 shape: " }, { "_type": "Attribute", "attr": "output_shape", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 38, "end_lineno": 27, "lineno": 27, "value": { "_type": "Name", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 25, "end_lineno": 27, "id": "model", "lineno": 27 } } ], "col_offset": 0, "end_col_offset": 39, "end_lineno": 27, "func": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 27, "id": "print", "lineno": 27 }, "keywords": [], "lineno": 27 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 20, "end_lineno": 30, "lineno": 30, "value": { "_type": "Call", "args": [ { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 16, "end_col_offset": 18, "end_lineno": 30, "kind": null, "lineno": 30, "n": 50, "s": 50, "value": 50 } ], "col_offset": 10, "end_col_offset": 19, "end_lineno": 30, "func": { "_type": "Name", "col_offset": 10, "ctx": { "_type": "Load" }, "end_col_offset": 15, "end_lineno": 30, "id": "Dense", "lineno": 30 }, "keywords": [], "lineno": 30 } ], "col_offset": 0, "end_col_offset": 20, "end_lineno": 30, "func": { "_type": "Attribute", "attr": "add", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 9, "end_lineno": 30, "lineno": 30, "value": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 30, "id": "model", "lineno": 30 } }, "keywords": [], "lineno": 30 } } ], "type_ignores": [] }'.

	imports := model allWithType: PythonASTImport.
	self assert: imports first name equals: 'Sequential'.
	self assert: imports first asName equals: nil.
	self assert: imports first lineNumber equals: 1.
]

{ #category : #parsing }
PythonASTVisitorTest >> testVisitExpr [

	| model module |
	model := self parse:
		         '{ "_type": "Module", "body": [ { "_type": "Import", "col_offset": 0, "end_col_offset": 21, "end_lineno": 1, "lineno": 1, "names": [ { "_type": "alias", "asname": "conv", "col_offset": 7, "end_col_offset": 21, "end_lineno": 1, "lineno": 1, "name": "conv2D" } ] }, { "_type": "ImportFrom", "col_offset": 0, "end_col_offset": 35, "end_lineno": 2, "level": 0, "lineno": 2, "module": "keras.models", "names": [ { "_type": "alias", "asname": null, "col_offset": 25, "end_col_offset": 35, "end_lineno": 2, "lineno": 2, "name": "Sequential" } ] }, { "_type": "FunctionDef", "args": { "_type": "arguments", "args": [ { "_type": "arg", "annotation": null, "arg": "test2", "col_offset": 11, "end_col_offset": 16, "end_lineno": 4, "lineno": 4, "type_comment": null } ], "defaults": [], "kw_defaults": [], "kwarg": null, "kwonlyargs": [], "posonlyargs": [], "vararg": null }, "body": [ { "_type": "Expr", "col_offset": 4, "end_col_offset": 19, "end_lineno": 5, "lineno": 5, "value": { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 9, "end_col_offset": 12, "end_lineno": 5, "kind": null, "lineno": 5, "n": 256, "s": 256, "value": 256 }, { "_type": "Constant", "col_offset": 14, "end_col_offset": 15, "end_lineno": 5, "kind": null, "lineno": 5, "n": 3, "s": 3, "value": 3 }, { "_type": "Constant", "col_offset": 17, "end_col_offset": 18, "end_lineno": 5, "kind": null, "lineno": 5, "n": 3, "s": 3, "value": 3 } ], "col_offset": 4, "end_col_offset": 19, "end_lineno": 5, "func": { "_type": "Name", "col_offset": 4, "ctx": { "_type": "Load" }, "end_col_offset": 8, "end_lineno": 5, "id": "conv", "lineno": 5 }, "keywords": [], "lineno": 5 } }, { "_type": "Assign", "col_offset": 4, "end_col_offset": 24, "end_lineno": 7, "lineno": 7, "targets": [ { "_type": "Name", "col_offset": 4, "ctx": { "_type": "Store" }, "end_col_offset": 9, "end_lineno": 7, "id": "model", "lineno": 7 } ], "type_comment": null, "value": { "_type": "Call", "args": [], "col_offset": 12, "end_col_offset": 24, "end_lineno": 7, "func": { "_type": "Name", "col_offset": 12, "ctx": { "_type": "Load" }, "end_col_offset": 22, "end_lineno": 7, "id": "Sequential", "lineno": 7 }, "keywords": [], "lineno": 7 } } ], "col_offset": 0, "decorator_list": [], "end_col_offset": 24, "end_lineno": 7, "lineno": 4, "name": "sample", "returns": null, "type_comment": null } ], "type_ignores": [] }'.

	module := model first.
	self assert: module class equals: PythonASTModule.
	self assert: module name equals: 'sample.json'.
	self assert: module lineNumber equals: 0
]

{ #category : #parsing }
PythonASTVisitorTest >> testVisitFunctionDef [

	| model functionDefinitions |
	model := self parse:
		         '{ "_type": "Module", "body": [ { "_type": "Import", "col_offset": 0, "end_col_offset": 21, "end_lineno": 1, "lineno": 1, "names": [ { "_type": "alias", "asname": "conv", "col_offset": 7, "end_col_offset": 21, "end_lineno": 1, "lineno": 1, "name": "conv2D" } ] }, { "_type": "FunctionDef", "args": { "_type": "arguments", "args": [ { "_type": "arg", "annotation": null, "arg": "test2", "col_offset": 11, "end_col_offset": 16, "end_lineno": 3, "lineno": 3, "type_comment": null }, { "_type": "arg", "annotation": null, "arg": "test1", "col_offset": 18, "end_col_offset": 23, "end_lineno": 3, "lineno": 3, "type_comment": null } ], "defaults": [ { "_type": "Constant", "col_offset": 24, "end_col_offset": 25, "end_lineno": 3, "kind": null, "lineno": 3, "n": 1, "s": 1, "value": 1 } ], "kw_defaults": [], "kwarg": null, "kwonlyargs": [], "posonlyargs": [], "vararg": null }, "body": [ { "_type": "Expr", "col_offset": 4, "end_col_offset": 19, "end_lineno": 4, "lineno": 4, "value": { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 9, "end_col_offset": 12, "end_lineno": 4, "kind": null, "lineno": 4, "n": 256, "s": 256, "value": 256 }, { "_type": "Constant", "col_offset": 14, "end_col_offset": 15, "end_lineno": 4, "kind": null, "lineno": 4, "n": 3, "s": 3, "value": 3 }, { "_type": "Constant", "col_offset": 17, "end_col_offset": 18, "end_lineno": 4, "kind": null, "lineno": 4, "n": 3, "s": 3, "value": 3 } ], "col_offset": 4, "end_col_offset": 19, "end_lineno": 4, "func": { "_type": "Name", "col_offset": 4, "ctx": { "_type": "Load" }, "end_col_offset": 8, "end_lineno": 4, "id": "conv", "lineno": 4 }, "keywords": [], "lineno": 4 } }, { "_type": "Expr", "col_offset": 4, "end_col_offset": 19, "end_lineno": 5, "lineno": 5, "value": { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 9, "end_col_offset": 12, "end_lineno": 5, "kind": null, "lineno": 5, "n": 256, "s": 256, "value": 256 }, { "_type": "Constant", "col_offset": 14, "end_col_offset": 15, "end_lineno": 5, "kind": null, "lineno": 5, "n": 3, "s": 3, "value": 3 }, { "_type": "Constant", "col_offset": 17, "end_col_offset": 18, "end_lineno": 5, "kind": null, "lineno": 5, "n": 3, "s": 3, "value": 3 } ], "col_offset": 4, "end_col_offset": 19, "end_lineno": 5, "func": { "_type": "Name", "col_offset": 4, "ctx": { "_type": "Load" }, "end_col_offset": 8, "end_lineno": 5, "id": "conv", "lineno": 5 }, "keywords": [], "lineno": 5 } } ], "col_offset": 0, "decorator_list": [], "end_col_offset": 19, "end_lineno": 5, "lineno": 3, "name": "sample", "returns": null, "type_comment": null } ], "type_ignores": [] }'.

	functionDefinitions := model allWithType: PythonASTFunctionDefinition.
	self assert: functionDefinitions size equals: 1.
	self assert: functionDefinitions first name equals: 'sample'.
	self assert: functionDefinitions first parameters size equals: 2.
	self assert: functionDefinitions first parameters first name equals: 'test2'.
	self assert: functionDefinitions first parameters second name equals: 'test1'.
	"self assert: functionDefinitions first parameters first defaultValue equals: '1'"
]

{ #category : #parsing }
PythonASTVisitorTest >> testVisitImport [

	| model imports |
	model := self parse:
		         '{ "_type": "Module", "body": [ { "_type": "Import", "col_offset": 0, "end_col_offset": 21, "end_lineno": 1, "lineno": 1, "names": [ { "_type": "alias", "asname": "conv", "col_offset": 7, "end_col_offset": 21, "end_lineno": 1, "lineno": 1, "name": "conv2D" } ] }, { "_type": "FunctionDef", "args": { "_type": "arguments", "args": [], "defaults": [], "kw_defaults": [], "kwarg": null, "kwonlyargs": [], "posonlyargs": [], "vararg": null }, "body": [ { "_type": "Expr", "col_offset": 4, "end_col_offset": 19, "end_lineno": 4, "lineno": 4, "value": { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 9, "end_col_offset": 12, "end_lineno": 4, "kind": null, "lineno": 4, "n": 256, "s": 256, "value": 256 }, { "_type": "Constant", "col_offset": 14, "end_col_offset": 15, "end_lineno": 4, "kind": null, "lineno": 4, "n": 3, "s": 3, "value": 3 }, { "_type": "Constant", "col_offset": 17, "end_col_offset": 18, "end_lineno": 4, "kind": null, "lineno": 4, "n": 3, "s": 3, "value": 3 } ], "col_offset": 4, "end_col_offset": 19, "end_lineno": 4, "func": { "_type": "Name", "col_offset": 4, "ctx": { "_type": "Load" }, "end_col_offset": 8, "end_lineno": 4, "id": "conv", "lineno": 4 }, "keywords": [], "lineno": 4 } }, { "_type": "Expr", "col_offset": 4, "end_col_offset": 19, "end_lineno": 5, "lineno": 5, "value": { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 9, "end_col_offset": 12, "end_lineno": 5, "kind": null, "lineno": 5, "n": 256, "s": 256, "value": 256 }, { "_type": "Constant", "col_offset": 14, "end_col_offset": 15, "end_lineno": 5, "kind": null, "lineno": 5, "n": 3, "s": 3, "value": 3 }, { "_type": "Constant", "col_offset": 17, "end_col_offset": 18, "end_lineno": 5, "kind": null, "lineno": 5, "n": 3, "s": 3, "value": 3 } ], "col_offset": 4, "end_col_offset": 19, "end_lineno": 5, "func": { "_type": "Name", "col_offset": 4, "ctx": { "_type": "Load" }, "end_col_offset": 8, "end_lineno": 5, "id": "conv", "lineno": 5 }, "keywords": [], "lineno": 5 } } ], "col_offset": 0, "decorator_list": [], "end_col_offset": 19, "end_lineno": 5, "lineno": 3, "name": "sample", "returns": null, "type_comment": null } ], "type_ignores": [] }'.

	imports := model allWithType: PythonASTImport.
	self assert: imports size equals: 1.
	self assert: imports first name equals: 'conv2D'.
	self assert: imports first asName equals: 'conv'.
	self assert: imports first lineNumber equals: 1.
]

{ #category : #parsing }
PythonASTVisitorTest >> testVisitImportFrom [

	| model imports |
	model := self parse:
		         '{ "_type": "Module", "body": [ { "_type": "ImportFrom", "col_offset": 0, "end_col_offset": 35, "end_lineno": 1, "level": 0, "lineno": 1, "module": "keras.models", "names": [ { "_type": "alias", "asname": null, "col_offset": 25, "end_col_offset": 35, "end_lineno": 1, "lineno": 1, "name": "Sequential" } ] }, { "_type": "ImportFrom", "col_offset": 0, "end_col_offset": 30, "end_lineno": 2, "level": 0, "lineno": 2, "module": "keras.layers", "names": [ { "_type": "alias", "asname": null, "col_offset": 25, "end_col_offset": 30, "end_lineno": 2, "lineno": 2, "name": "Dense" } ] }, { "_type": "ImportFrom", "col_offset": 0, "end_col_offset": 52, "end_lineno": 3, "level": 0, "lineno": 3, "module": "keras.layers.convolutional", "names": [ { "_type": "alias", "asname": null, "col_offset": 39, "end_col_offset": 52, "end_lineno": 3, "lineno": 3, "name": "Convolution2D" } ] }, { "_type": "ImportFrom", "col_offset": 0, "end_col_offset": 51, "end_lineno": 4, "level": 0, "lineno": 4, "module": "keras.layers.convolutional", "names": [ { "_type": "alias", "asname": null, "col_offset": 39, "end_col_offset": 51, "end_lineno": 4, "lineno": 4, "name": "MaxPooling2D" } ] }, { "_type": "Assign", "col_offset": 0, "end_col_offset": 29, "end_lineno": 6, "lineno": 6, "targets": [ { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Store" }, "end_col_offset": 15, "end_lineno": 6, "id": "input_img_shape", "lineno": 6 } ], "type_comment": null, "value": { "_type": "Tuple", "col_offset": 18, "ctx": { "_type": "Load" }, "dims": [ { "_type": "Constant", "col_offset": 19, "end_col_offset": 20, "end_lineno": 6, "kind": null, "lineno": 6, "n": 1, "s": 1, "value": 1 }, { "_type": "Constant", "col_offset": 22, "end_col_offset": 24, "end_lineno": 6, "kind": null, "lineno": 6, "n": 28, "s": 28, "value": 28 }, { "_type": "Constant", "col_offset": 26, "end_col_offset": 28, "end_lineno": 6, "kind": null, "lineno": 6, "n": 28, "s": 28, "value": 28 } ], "elts": [ { "_type": "Constant", "col_offset": 19, "end_col_offset": 20, "end_lineno": 6, "kind": null, "lineno": 6, "n": 1, "s": 1, "value": 1 }, { "_type": "Constant", "col_offset": 22, "end_col_offset": 24, "end_lineno": 6, "kind": null, "lineno": 6, "n": 28, "s": 28, "value": 28 }, { "_type": "Constant", "col_offset": 26, "end_col_offset": 28, "end_lineno": 6, "kind": null, "lineno": 6, "n": 28, "s": 28, "value": 28 } ], "end_col_offset": 29, "end_lineno": 6, "lineno": 6 } }, { "_type": "Assign", "col_offset": 0, "end_col_offset": 20, "end_lineno": 7, "lineno": 7, "targets": [ { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Store" }, "end_col_offset": 5, "end_lineno": 7, "id": "model", "lineno": 7 } ], "type_comment": null, "value": { "_type": "Call", "args": [], "col_offset": 8, "end_col_offset": 20, "end_lineno": 7, "func": { "_type": "Name", "col_offset": 8, "ctx": { "_type": "Load" }, "end_col_offset": 18, "end_lineno": 7, "id": "Sequential", "lineno": 7 }, "keywords": [], "lineno": 7 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 29, "end_lineno": 15, "lineno": 12, "value": { "_type": "Call", "args": [ { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 24, "end_col_offset": 26, "end_lineno": 12, "kind": null, "lineno": 12, "n": 15, "s": 15, "value": 15 }, { "_type": "Constant", "col_offset": 28, "end_col_offset": 29, "end_lineno": 12, "kind": null, "lineno": 12, "n": 7, "s": 7, "value": 7 }, { "_type": "Constant", "col_offset": 31, "end_col_offset": 32, "end_lineno": 12, "kind": null, "lineno": 12, "n": 7, "s": 7, "value": 7 } ], "col_offset": 10, "end_col_offset": 28, "end_lineno": 15, "func": { "_type": "Name", "col_offset": 10, "ctx": { "_type": "Load" }, "end_col_offset": 23, "end_lineno": 12, "id": "Convolution2D", "lineno": 12 }, "keywords": [ { "_type": "keyword", "arg": "activation", "col_offset": 0, "end_col_offset": 17, "end_lineno": 13, "lineno": 13, "value": { "_type": "Constant", "col_offset": 11, "end_col_offset": 17, "end_lineno": 13, "kind": null, "lineno": 13, "n": "relu", "s": "relu", "value": "relu" } }, { "_type": "keyword", "arg": "border_mode", "col_offset": 0, "end_col_offset": 18, "end_lineno": 14, "lineno": 14, "value": { "_type": "Constant", "col_offset": 12, "end_col_offset": 18, "end_lineno": 14, "kind": null, "lineno": 14, "n": "same", "s": "same", "value": "same" } }, { "_type": "keyword", "arg": "input_shape", "col_offset": 0, "end_col_offset": 27, "end_lineno": 15, "lineno": 15, "value": { "_type": "Name", "col_offset": 12, "ctx": { "_type": "Load" }, "end_col_offset": 27, "end_lineno": 15, "id": "input_img_shape", "lineno": 15 } } ], "lineno": 12 } ], "col_offset": 0, "end_col_offset": 29, "end_lineno": 15, "func": { "_type": "Attribute", "attr": "add", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 9, "end_lineno": 12, "lineno": 12, "value": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 12, "id": "model", "lineno": 12 } }, "keywords": [], "lineno": 12 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 39, "end_lineno": 16, "lineno": 16, "value": { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 6, "end_col_offset": 18, "end_lineno": 16, "kind": null, "lineno": 16, "n": "C1 shape: ", "s": "C1 shape: ", "value": "C1 shape: " }, { "_type": "Attribute", "attr": "output_shape", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 38, "end_lineno": 16, "lineno": 16, "value": { "_type": "Name", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 25, "end_lineno": 16, "id": "model", "lineno": 16 } } ], "col_offset": 0, "end_col_offset": 39, "end_lineno": 16, "func": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 16, "id": "print", "lineno": 16 }, "keywords": [], "lineno": 16 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 50, "end_lineno": 19, "lineno": 19, "value": { "_type": "Call", "args": [ { "_type": "Call", "args": [ { "_type": "Tuple", "col_offset": 23, "ctx": { "_type": "Load" }, "dims": [ { "_type": "Constant", "col_offset": 24, "end_col_offset": 25, "end_lineno": 19, "kind": null, "lineno": 19, "n": 2, "s": 2, "value": 2 }, { "_type": "Constant", "col_offset": 26, "end_col_offset": 27, "end_lineno": 19, "kind": null, "lineno": 19, "n": 2, "s": 2, "value": 2 } ], "elts": [ { "_type": "Constant", "col_offset": 24, "end_col_offset": 25, "end_lineno": 19, "kind": null, "lineno": 19, "n": 2, "s": 2, "value": 2 }, { "_type": "Constant", "col_offset": 26, "end_col_offset": 27, "end_lineno": 19, "kind": null, "lineno": 19, "n": 2, "s": 2, "value": 2 } ], "end_col_offset": 28, "end_lineno": 19, "lineno": 19 } ], "col_offset": 10, "end_col_offset": 49, "end_lineno": 19, "func": { "_type": "Name", "col_offset": 10, "ctx": { "_type": "Load" }, "end_col_offset": 22, "end_lineno": 19, "id": "MaxPooling2D", "lineno": 19 }, "keywords": [ { "_type": "keyword", "arg": "border_mode", "col_offset": 30, "end_col_offset": 48, "end_lineno": 19, "lineno": 19, "value": { "_type": "Constant", "col_offset": 42, "end_col_offset": 48, "end_lineno": 19, "kind": null, "lineno": 19, "n": "same", "s": "same", "value": "same" } } ], "lineno": 19 } ], "col_offset": 0, "end_col_offset": 50, "end_lineno": 19, "func": { "_type": "Attribute", "attr": "add", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 9, "end_lineno": 19, "lineno": 19, "value": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 19, "id": "model", "lineno": 19 } }, "keywords": [], "lineno": 19 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 39, "end_lineno": 20, "lineno": 20, "value": { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 6, "end_col_offset": 18, "end_lineno": 20, "kind": null, "lineno": 20, "n": "S2 shape: ", "s": "S2 shape: ", "value": "S2 shape: " }, { "_type": "Attribute", "attr": "output_shape", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 38, "end_lineno": 20, "lineno": 20, "value": { "_type": "Name", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 25, "end_lineno": 20, "id": "model", "lineno": 20 } } ], "col_offset": 0, "end_col_offset": 39, "end_lineno": 20, "func": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 20, "id": "print", "lineno": 20 }, "keywords": [], "lineno": 20 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 20, "end_lineno": 26, "lineno": 24, "value": { "_type": "Call", "args": [ { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 24, "end_col_offset": 27, "end_lineno": 24, "kind": null, "lineno": 24, "n": 250, "s": 250, "value": 250 }, { "_type": "Constant", "col_offset": 29, "end_col_offset": 30, "end_lineno": 24, "kind": null, "lineno": 24, "n": 5, "s": 5, "value": 5 }, { "_type": "Constant", "col_offset": 32, "end_col_offset": 33, "end_lineno": 24, "kind": null, "lineno": 24, "n": 5, "s": 5, "value": 5 } ], "col_offset": 10, "end_col_offset": 19, "end_lineno": 26, "func": { "_type": "Name", "col_offset": 10, "ctx": { "_type": "Load" }, "end_col_offset": 23, "end_lineno": 24, "id": "Convolution2D", "lineno": 24 }, "keywords": [ { "_type": "keyword", "arg": "activation", "col_offset": 0, "end_col_offset": 17, "end_lineno": 25, "lineno": 25, "value": { "_type": "Constant", "col_offset": 11, "end_col_offset": 17, "end_lineno": 25, "kind": null, "lineno": 25, "n": "relu", "s": "relu", "value": "relu" } }, { "_type": "keyword", "arg": "border_mode", "col_offset": 0, "end_col_offset": 18, "end_lineno": 26, "lineno": 26, "value": { "_type": "Constant", "col_offset": 12, "end_col_offset": 18, "end_lineno": 26, "kind": null, "lineno": 26, "n": "same", "s": "same", "value": "same" } } ], "lineno": 24 } ], "col_offset": 0, "end_col_offset": 20, "end_lineno": 26, "func": { "_type": "Attribute", "attr": "add", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 9, "end_lineno": 24, "lineno": 24, "value": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 24, "id": "model", "lineno": 24 } }, "keywords": [], "lineno": 24 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 39, "end_lineno": 27, "lineno": 27, "value": { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 6, "end_col_offset": 18, "end_lineno": 27, "kind": null, "lineno": 27, "n": "C5 shape: ", "s": "C5 shape: ", "value": "C5 shape: " }, { "_type": "Attribute", "attr": "output_shape", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 38, "end_lineno": 27, "lineno": 27, "value": { "_type": "Name", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 25, "end_lineno": 27, "id": "model", "lineno": 27 } } ], "col_offset": 0, "end_col_offset": 39, "end_lineno": 27, "func": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 27, "id": "print", "lineno": 27 }, "keywords": [], "lineno": 27 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 20, "end_lineno": 30, "lineno": 30, "value": { "_type": "Call", "args": [ { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 16, "end_col_offset": 18, "end_lineno": 30, "kind": null, "lineno": 30, "n": 50, "s": 50, "value": 50 } ], "col_offset": 10, "end_col_offset": 19, "end_lineno": 30, "func": { "_type": "Name", "col_offset": 10, "ctx": { "_type": "Load" }, "end_col_offset": 15, "end_lineno": 30, "id": "Dense", "lineno": 30 }, "keywords": [], "lineno": 30 } ], "col_offset": 0, "end_col_offset": 20, "end_lineno": 30, "func": { "_type": "Attribute", "attr": "add", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 9, "end_lineno": 30, "lineno": 30, "value": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 30, "id": "model", "lineno": 30 } }, "keywords": [], "lineno": 30 } } ], "type_ignores": [] }'.

	imports := model allWithType: PythonASTImport.
	self assert: imports size equals: 4.
	self assert: imports first name equals: 'Sequential'.
	self assert: imports second asName equals: nil.
	self assert: imports third lineNumber equals: 3.
	self assert: imports last from equals: 'keras.layers.convolutional'
]

{ #category : #parsing }
PythonASTVisitorTest >> testVisitJsonEntity [

	| model |
	model := self parse:
		         '{ "_type": "Module", "body": [ { "_type": "ImportFrom", "col_offset": 0, "end_col_offset": 35, "end_lineno": 1, "level": 0, "lineno": 1, "module": "keras.models", "names": [ { "_type": "alias", "asname": null, "col_offset": 25, "end_col_offset": 35, "end_lineno": 1, "lineno": 1, "name": "Sequential" } ] }, { "_type": "ImportFrom", "col_offset": 0, "end_col_offset": 30, "end_lineno": 2, "level": 0, "lineno": 2, "module": "keras.layers", "names": [ { "_type": "alias", "asname": null, "col_offset": 25, "end_col_offset": 30, "end_lineno": 2, "lineno": 2, "name": "Dense" } ] }, { "_type": "ImportFrom", "col_offset": 0, "end_col_offset": 52, "end_lineno": 3, "level": 0, "lineno": 3, "module": "keras.layers.convolutional", "names": [ { "_type": "alias", "asname": null, "col_offset": 39, "end_col_offset": 52, "end_lineno": 3, "lineno": 3, "name": "Convolution2D" } ] }, { "_type": "ImportFrom", "col_offset": 0, "end_col_offset": 51, "end_lineno": 4, "level": 0, "lineno": 4, "module": "keras.layers.convolutional", "names": [ { "_type": "alias", "asname": null, "col_offset": 39, "end_col_offset": 51, "end_lineno": 4, "lineno": 4, "name": "MaxPooling2D" } ] }, { "_type": "Assign", "col_offset": 0, "end_col_offset": 29, "end_lineno": 6, "lineno": 6, "targets": [ { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Store" }, "end_col_offset": 15, "end_lineno": 6, "id": "input_img_shape", "lineno": 6 } ], "type_comment": null, "value": { "_type": "Tuple", "col_offset": 18, "ctx": { "_type": "Load" }, "dims": [ { "_type": "Constant", "col_offset": 19, "end_col_offset": 20, "end_lineno": 6, "kind": null, "lineno": 6, "n": 1, "s": 1, "value": 1 }, { "_type": "Constant", "col_offset": 22, "end_col_offset": 24, "end_lineno": 6, "kind": null, "lineno": 6, "n": 28, "s": 28, "value": 28 }, { "_type": "Constant", "col_offset": 26, "end_col_offset": 28, "end_lineno": 6, "kind": null, "lineno": 6, "n": 28, "s": 28, "value": 28 } ], "elts": [ { "_type": "Constant", "col_offset": 19, "end_col_offset": 20, "end_lineno": 6, "kind": null, "lineno": 6, "n": 1, "s": 1, "value": 1 }, { "_type": "Constant", "col_offset": 22, "end_col_offset": 24, "end_lineno": 6, "kind": null, "lineno": 6, "n": 28, "s": 28, "value": 28 }, { "_type": "Constant", "col_offset": 26, "end_col_offset": 28, "end_lineno": 6, "kind": null, "lineno": 6, "n": 28, "s": 28, "value": 28 } ], "end_col_offset": 29, "end_lineno": 6, "lineno": 6 } }, { "_type": "Assign", "col_offset": 0, "end_col_offset": 20, "end_lineno": 7, "lineno": 7, "targets": [ { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Store" }, "end_col_offset": 5, "end_lineno": 7, "id": "model", "lineno": 7 } ], "type_comment": null, "value": { "_type": "Call", "args": [], "col_offset": 8, "end_col_offset": 20, "end_lineno": 7, "func": { "_type": "Name", "col_offset": 8, "ctx": { "_type": "Load" }, "end_col_offset": 18, "end_lineno": 7, "id": "Sequential", "lineno": 7 }, "keywords": [], "lineno": 7 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 29, "end_lineno": 15, "lineno": 12, "value": { "_type": "Call", "args": [ { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 24, "end_col_offset": 26, "end_lineno": 12, "kind": null, "lineno": 12, "n": 15, "s": 15, "value": 15 }, { "_type": "Constant", "col_offset": 28, "end_col_offset": 29, "end_lineno": 12, "kind": null, "lineno": 12, "n": 7, "s": 7, "value": 7 }, { "_type": "Constant", "col_offset": 31, "end_col_offset": 32, "end_lineno": 12, "kind": null, "lineno": 12, "n": 7, "s": 7, "value": 7 } ], "col_offset": 10, "end_col_offset": 28, "end_lineno": 15, "func": { "_type": "Name", "col_offset": 10, "ctx": { "_type": "Load" }, "end_col_offset": 23, "end_lineno": 12, "id": "Convolution2D", "lineno": 12 }, "keywords": [ { "_type": "keyword", "arg": "activation", "col_offset": 0, "end_col_offset": 17, "end_lineno": 13, "lineno": 13, "value": { "_type": "Constant", "col_offset": 11, "end_col_offset": 17, "end_lineno": 13, "kind": null, "lineno": 13, "n": "relu", "s": "relu", "value": "relu" } }, { "_type": "keyword", "arg": "border_mode", "col_offset": 0, "end_col_offset": 18, "end_lineno": 14, "lineno": 14, "value": { "_type": "Constant", "col_offset": 12, "end_col_offset": 18, "end_lineno": 14, "kind": null, "lineno": 14, "n": "same", "s": "same", "value": "same" } }, { "_type": "keyword", "arg": "input_shape", "col_offset": 0, "end_col_offset": 27, "end_lineno": 15, "lineno": 15, "value": { "_type": "Name", "col_offset": 12, "ctx": { "_type": "Load" }, "end_col_offset": 27, "end_lineno": 15, "id": "input_img_shape", "lineno": 15 } } ], "lineno": 12 } ], "col_offset": 0, "end_col_offset": 29, "end_lineno": 15, "func": { "_type": "Attribute", "attr": "add", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 9, "end_lineno": 12, "lineno": 12, "value": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 12, "id": "model", "lineno": 12 } }, "keywords": [], "lineno": 12 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 39, "end_lineno": 16, "lineno": 16, "value": { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 6, "end_col_offset": 18, "end_lineno": 16, "kind": null, "lineno": 16, "n": "C1 shape: ", "s": "C1 shape: ", "value": "C1 shape: " }, { "_type": "Attribute", "attr": "output_shape", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 38, "end_lineno": 16, "lineno": 16, "value": { "_type": "Name", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 25, "end_lineno": 16, "id": "model", "lineno": 16 } } ], "col_offset": 0, "end_col_offset": 39, "end_lineno": 16, "func": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 16, "id": "print", "lineno": 16 }, "keywords": [], "lineno": 16 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 50, "end_lineno": 19, "lineno": 19, "value": { "_type": "Call", "args": [ { "_type": "Call", "args": [ { "_type": "Tuple", "col_offset": 23, "ctx": { "_type": "Load" }, "dims": [ { "_type": "Constant", "col_offset": 24, "end_col_offset": 25, "end_lineno": 19, "kind": null, "lineno": 19, "n": 2, "s": 2, "value": 2 }, { "_type": "Constant", "col_offset": 26, "end_col_offset": 27, "end_lineno": 19, "kind": null, "lineno": 19, "n": 2, "s": 2, "value": 2 } ], "elts": [ { "_type": "Constant", "col_offset": 24, "end_col_offset": 25, "end_lineno": 19, "kind": null, "lineno": 19, "n": 2, "s": 2, "value": 2 }, { "_type": "Constant", "col_offset": 26, "end_col_offset": 27, "end_lineno": 19, "kind": null, "lineno": 19, "n": 2, "s": 2, "value": 2 } ], "end_col_offset": 28, "end_lineno": 19, "lineno": 19 } ], "col_offset": 10, "end_col_offset": 49, "end_lineno": 19, "func": { "_type": "Name", "col_offset": 10, "ctx": { "_type": "Load" }, "end_col_offset": 22, "end_lineno": 19, "id": "MaxPooling2D", "lineno": 19 }, "keywords": [ { "_type": "keyword", "arg": "border_mode", "col_offset": 30, "end_col_offset": 48, "end_lineno": 19, "lineno": 19, "value": { "_type": "Constant", "col_offset": 42, "end_col_offset": 48, "end_lineno": 19, "kind": null, "lineno": 19, "n": "same", "s": "same", "value": "same" } } ], "lineno": 19 } ], "col_offset": 0, "end_col_offset": 50, "end_lineno": 19, "func": { "_type": "Attribute", "attr": "add", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 9, "end_lineno": 19, "lineno": 19, "value": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 19, "id": "model", "lineno": 19 } }, "keywords": [], "lineno": 19 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 39, "end_lineno": 20, "lineno": 20, "value": { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 6, "end_col_offset": 18, "end_lineno": 20, "kind": null, "lineno": 20, "n": "S2 shape: ", "s": "S2 shape: ", "value": "S2 shape: " }, { "_type": "Attribute", "attr": "output_shape", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 38, "end_lineno": 20, "lineno": 20, "value": { "_type": "Name", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 25, "end_lineno": 20, "id": "model", "lineno": 20 } } ], "col_offset": 0, "end_col_offset": 39, "end_lineno": 20, "func": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 20, "id": "print", "lineno": 20 }, "keywords": [], "lineno": 20 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 20, "end_lineno": 26, "lineno": 24, "value": { "_type": "Call", "args": [ { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 24, "end_col_offset": 27, "end_lineno": 24, "kind": null, "lineno": 24, "n": 250, "s": 250, "value": 250 }, { "_type": "Constant", "col_offset": 29, "end_col_offset": 30, "end_lineno": 24, "kind": null, "lineno": 24, "n": 5, "s": 5, "value": 5 }, { "_type": "Constant", "col_offset": 32, "end_col_offset": 33, "end_lineno": 24, "kind": null, "lineno": 24, "n": 5, "s": 5, "value": 5 } ], "col_offset": 10, "end_col_offset": 19, "end_lineno": 26, "func": { "_type": "Name", "col_offset": 10, "ctx": { "_type": "Load" }, "end_col_offset": 23, "end_lineno": 24, "id": "Convolution2D", "lineno": 24 }, "keywords": [ { "_type": "keyword", "arg": "activation", "col_offset": 0, "end_col_offset": 17, "end_lineno": 25, "lineno": 25, "value": { "_type": "Constant", "col_offset": 11, "end_col_offset": 17, "end_lineno": 25, "kind": null, "lineno": 25, "n": "relu", "s": "relu", "value": "relu" } }, { "_type": "keyword", "arg": "border_mode", "col_offset": 0, "end_col_offset": 18, "end_lineno": 26, "lineno": 26, "value": { "_type": "Constant", "col_offset": 12, "end_col_offset": 18, "end_lineno": 26, "kind": null, "lineno": 26, "n": "same", "s": "same", "value": "same" } } ], "lineno": 24 } ], "col_offset": 0, "end_col_offset": 20, "end_lineno": 26, "func": { "_type": "Attribute", "attr": "add", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 9, "end_lineno": 24, "lineno": 24, "value": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 24, "id": "model", "lineno": 24 } }, "keywords": [], "lineno": 24 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 39, "end_lineno": 27, "lineno": 27, "value": { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 6, "end_col_offset": 18, "end_lineno": 27, "kind": null, "lineno": 27, "n": "C5 shape: ", "s": "C5 shape: ", "value": "C5 shape: " }, { "_type": "Attribute", "attr": "output_shape", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 38, "end_lineno": 27, "lineno": 27, "value": { "_type": "Name", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 25, "end_lineno": 27, "id": "model", "lineno": 27 } } ], "col_offset": 0, "end_col_offset": 39, "end_lineno": 27, "func": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 27, "id": "print", "lineno": 27 }, "keywords": [], "lineno": 27 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 20, "end_lineno": 30, "lineno": 30, "value": { "_type": "Call", "args": [ { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 16, "end_col_offset": 18, "end_lineno": 30, "kind": null, "lineno": 30, "n": 50, "s": 50, "value": 50 } ], "col_offset": 10, "end_col_offset": 19, "end_lineno": 30, "func": { "_type": "Name", "col_offset": 10, "ctx": { "_type": "Load" }, "end_col_offset": 15, "end_lineno": 30, "id": "Dense", "lineno": 30 }, "keywords": [], "lineno": 30 } ], "col_offset": 0, "end_col_offset": 20, "end_lineno": 30, "func": { "_type": "Attribute", "attr": "add", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 9, "end_lineno": 30, "lineno": 30, "value": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 30, "id": "model", "lineno": 30 } }, "keywords": [], "lineno": 30 } } ], "type_ignores": [] }'.

	self assert: model class equals: PythonASTModel.
	self assert: model name equals: 'mon model ast'
]

{ #category : #parsing }
PythonASTVisitorTest >> testVisitModule [

	| model module |
	model := self parse:
		         '{ "_type": "Module", "body": [ { "_type": "ImportFrom", "col_offset": 0, "end_col_offset": 35, "end_lineno": 1, "level": 0, "lineno": 1, "module": "keras.models", "names": [ { "_type": "alias", "asname": null, "col_offset": 25, "end_col_offset": 35, "end_lineno": 1, "lineno": 1, "name": "Sequential" } ] }, { "_type": "ImportFrom", "col_offset": 0, "end_col_offset": 30, "end_lineno": 2, "level": 0, "lineno": 2, "module": "keras.layers", "names": [ { "_type": "alias", "asname": null, "col_offset": 25, "end_col_offset": 30, "end_lineno": 2, "lineno": 2, "name": "Dense" } ] }, { "_type": "ImportFrom", "col_offset": 0, "end_col_offset": 52, "end_lineno": 3, "level": 0, "lineno": 3, "module": "keras.layers.convolutional", "names": [ { "_type": "alias", "asname": null, "col_offset": 39, "end_col_offset": 52, "end_lineno": 3, "lineno": 3, "name": "Convolution2D" } ] }, { "_type": "ImportFrom", "col_offset": 0, "end_col_offset": 51, "end_lineno": 4, "level": 0, "lineno": 4, "module": "keras.layers.convolutional", "names": [ { "_type": "alias", "asname": null, "col_offset": 39, "end_col_offset": 51, "end_lineno": 4, "lineno": 4, "name": "MaxPooling2D" } ] }, { "_type": "Assign", "col_offset": 0, "end_col_offset": 29, "end_lineno": 6, "lineno": 6, "targets": [ { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Store" }, "end_col_offset": 15, "end_lineno": 6, "id": "input_img_shape", "lineno": 6 } ], "type_comment": null, "value": { "_type": "Tuple", "col_offset": 18, "ctx": { "_type": "Load" }, "dims": [ { "_type": "Constant", "col_offset": 19, "end_col_offset": 20, "end_lineno": 6, "kind": null, "lineno": 6, "n": 1, "s": 1, "value": 1 }, { "_type": "Constant", "col_offset": 22, "end_col_offset": 24, "end_lineno": 6, "kind": null, "lineno": 6, "n": 28, "s": 28, "value": 28 }, { "_type": "Constant", "col_offset": 26, "end_col_offset": 28, "end_lineno": 6, "kind": null, "lineno": 6, "n": 28, "s": 28, "value": 28 } ], "elts": [ { "_type": "Constant", "col_offset": 19, "end_col_offset": 20, "end_lineno": 6, "kind": null, "lineno": 6, "n": 1, "s": 1, "value": 1 }, { "_type": "Constant", "col_offset": 22, "end_col_offset": 24, "end_lineno": 6, "kind": null, "lineno": 6, "n": 28, "s": 28, "value": 28 }, { "_type": "Constant", "col_offset": 26, "end_col_offset": 28, "end_lineno": 6, "kind": null, "lineno": 6, "n": 28, "s": 28, "value": 28 } ], "end_col_offset": 29, "end_lineno": 6, "lineno": 6 } }, { "_type": "Assign", "col_offset": 0, "end_col_offset": 20, "end_lineno": 7, "lineno": 7, "targets": [ { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Store" }, "end_col_offset": 5, "end_lineno": 7, "id": "model", "lineno": 7 } ], "type_comment": null, "value": { "_type": "Call", "args": [], "col_offset": 8, "end_col_offset": 20, "end_lineno": 7, "func": { "_type": "Name", "col_offset": 8, "ctx": { "_type": "Load" }, "end_col_offset": 18, "end_lineno": 7, "id": "Sequential", "lineno": 7 }, "keywords": [], "lineno": 7 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 29, "end_lineno": 15, "lineno": 12, "value": { "_type": "Call", "args": [ { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 24, "end_col_offset": 26, "end_lineno": 12, "kind": null, "lineno": 12, "n": 15, "s": 15, "value": 15 }, { "_type": "Constant", "col_offset": 28, "end_col_offset": 29, "end_lineno": 12, "kind": null, "lineno": 12, "n": 7, "s": 7, "value": 7 }, { "_type": "Constant", "col_offset": 31, "end_col_offset": 32, "end_lineno": 12, "kind": null, "lineno": 12, "n": 7, "s": 7, "value": 7 } ], "col_offset": 10, "end_col_offset": 28, "end_lineno": 15, "func": { "_type": "Name", "col_offset": 10, "ctx": { "_type": "Load" }, "end_col_offset": 23, "end_lineno": 12, "id": "Convolution2D", "lineno": 12 }, "keywords": [ { "_type": "keyword", "arg": "activation", "col_offset": 0, "end_col_offset": 17, "end_lineno": 13, "lineno": 13, "value": { "_type": "Constant", "col_offset": 11, "end_col_offset": 17, "end_lineno": 13, "kind": null, "lineno": 13, "n": "relu", "s": "relu", "value": "relu" } }, { "_type": "keyword", "arg": "border_mode", "col_offset": 0, "end_col_offset": 18, "end_lineno": 14, "lineno": 14, "value": { "_type": "Constant", "col_offset": 12, "end_col_offset": 18, "end_lineno": 14, "kind": null, "lineno": 14, "n": "same", "s": "same", "value": "same" } }, { "_type": "keyword", "arg": "input_shape", "col_offset": 0, "end_col_offset": 27, "end_lineno": 15, "lineno": 15, "value": { "_type": "Name", "col_offset": 12, "ctx": { "_type": "Load" }, "end_col_offset": 27, "end_lineno": 15, "id": "input_img_shape", "lineno": 15 } } ], "lineno": 12 } ], "col_offset": 0, "end_col_offset": 29, "end_lineno": 15, "func": { "_type": "Attribute", "attr": "add", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 9, "end_lineno": 12, "lineno": 12, "value": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 12, "id": "model", "lineno": 12 } }, "keywords": [], "lineno": 12 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 39, "end_lineno": 16, "lineno": 16, "value": { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 6, "end_col_offset": 18, "end_lineno": 16, "kind": null, "lineno": 16, "n": "C1 shape: ", "s": "C1 shape: ", "value": "C1 shape: " }, { "_type": "Attribute", "attr": "output_shape", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 38, "end_lineno": 16, "lineno": 16, "value": { "_type": "Name", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 25, "end_lineno": 16, "id": "model", "lineno": 16 } } ], "col_offset": 0, "end_col_offset": 39, "end_lineno": 16, "func": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 16, "id": "print", "lineno": 16 }, "keywords": [], "lineno": 16 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 50, "end_lineno": 19, "lineno": 19, "value": { "_type": "Call", "args": [ { "_type": "Call", "args": [ { "_type": "Tuple", "col_offset": 23, "ctx": { "_type": "Load" }, "dims": [ { "_type": "Constant", "col_offset": 24, "end_col_offset": 25, "end_lineno": 19, "kind": null, "lineno": 19, "n": 2, "s": 2, "value": 2 }, { "_type": "Constant", "col_offset": 26, "end_col_offset": 27, "end_lineno": 19, "kind": null, "lineno": 19, "n": 2, "s": 2, "value": 2 } ], "elts": [ { "_type": "Constant", "col_offset": 24, "end_col_offset": 25, "end_lineno": 19, "kind": null, "lineno": 19, "n": 2, "s": 2, "value": 2 }, { "_type": "Constant", "col_offset": 26, "end_col_offset": 27, "end_lineno": 19, "kind": null, "lineno": 19, "n": 2, "s": 2, "value": 2 } ], "end_col_offset": 28, "end_lineno": 19, "lineno": 19 } ], "col_offset": 10, "end_col_offset": 49, "end_lineno": 19, "func": { "_type": "Name", "col_offset": 10, "ctx": { "_type": "Load" }, "end_col_offset": 22, "end_lineno": 19, "id": "MaxPooling2D", "lineno": 19 }, "keywords": [ { "_type": "keyword", "arg": "border_mode", "col_offset": 30, "end_col_offset": 48, "end_lineno": 19, "lineno": 19, "value": { "_type": "Constant", "col_offset": 42, "end_col_offset": 48, "end_lineno": 19, "kind": null, "lineno": 19, "n": "same", "s": "same", "value": "same" } } ], "lineno": 19 } ], "col_offset": 0, "end_col_offset": 50, "end_lineno": 19, "func": { "_type": "Attribute", "attr": "add", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 9, "end_lineno": 19, "lineno": 19, "value": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 19, "id": "model", "lineno": 19 } }, "keywords": [], "lineno": 19 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 39, "end_lineno": 20, "lineno": 20, "value": { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 6, "end_col_offset": 18, "end_lineno": 20, "kind": null, "lineno": 20, "n": "S2 shape: ", "s": "S2 shape: ", "value": "S2 shape: " }, { "_type": "Attribute", "attr": "output_shape", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 38, "end_lineno": 20, "lineno": 20, "value": { "_type": "Name", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 25, "end_lineno": 20, "id": "model", "lineno": 20 } } ], "col_offset": 0, "end_col_offset": 39, "end_lineno": 20, "func": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 20, "id": "print", "lineno": 20 }, "keywords": [], "lineno": 20 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 20, "end_lineno": 26, "lineno": 24, "value": { "_type": "Call", "args": [ { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 24, "end_col_offset": 27, "end_lineno": 24, "kind": null, "lineno": 24, "n": 250, "s": 250, "value": 250 }, { "_type": "Constant", "col_offset": 29, "end_col_offset": 30, "end_lineno": 24, "kind": null, "lineno": 24, "n": 5, "s": 5, "value": 5 }, { "_type": "Constant", "col_offset": 32, "end_col_offset": 33, "end_lineno": 24, "kind": null, "lineno": 24, "n": 5, "s": 5, "value": 5 } ], "col_offset": 10, "end_col_offset": 19, "end_lineno": 26, "func": { "_type": "Name", "col_offset": 10, "ctx": { "_type": "Load" }, "end_col_offset": 23, "end_lineno": 24, "id": "Convolution2D", "lineno": 24 }, "keywords": [ { "_type": "keyword", "arg": "activation", "col_offset": 0, "end_col_offset": 17, "end_lineno": 25, "lineno": 25, "value": { "_type": "Constant", "col_offset": 11, "end_col_offset": 17, "end_lineno": 25, "kind": null, "lineno": 25, "n": "relu", "s": "relu", "value": "relu" } }, { "_type": "keyword", "arg": "border_mode", "col_offset": 0, "end_col_offset": 18, "end_lineno": 26, "lineno": 26, "value": { "_type": "Constant", "col_offset": 12, "end_col_offset": 18, "end_lineno": 26, "kind": null, "lineno": 26, "n": "same", "s": "same", "value": "same" } } ], "lineno": 24 } ], "col_offset": 0, "end_col_offset": 20, "end_lineno": 26, "func": { "_type": "Attribute", "attr": "add", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 9, "end_lineno": 24, "lineno": 24, "value": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 24, "id": "model", "lineno": 24 } }, "keywords": [], "lineno": 24 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 39, "end_lineno": 27, "lineno": 27, "value": { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 6, "end_col_offset": 18, "end_lineno": 27, "kind": null, "lineno": 27, "n": "C5 shape: ", "s": "C5 shape: ", "value": "C5 shape: " }, { "_type": "Attribute", "attr": "output_shape", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 38, "end_lineno": 27, "lineno": 27, "value": { "_type": "Name", "col_offset": 20, "ctx": { "_type": "Load" }, "end_col_offset": 25, "end_lineno": 27, "id": "model", "lineno": 27 } } ], "col_offset": 0, "end_col_offset": 39, "end_lineno": 27, "func": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 27, "id": "print", "lineno": 27 }, "keywords": [], "lineno": 27 } }, { "_type": "Expr", "col_offset": 0, "end_col_offset": 20, "end_lineno": 30, "lineno": 30, "value": { "_type": "Call", "args": [ { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 16, "end_col_offset": 18, "end_lineno": 30, "kind": null, "lineno": 30, "n": 50, "s": 50, "value": 50 } ], "col_offset": 10, "end_col_offset": 19, "end_lineno": 30, "func": { "_type": "Name", "col_offset": 10, "ctx": { "_type": "Load" }, "end_col_offset": 15, "end_lineno": 30, "id": "Dense", "lineno": 30 }, "keywords": [], "lineno": 30 } ], "col_offset": 0, "end_col_offset": 20, "end_lineno": 30, "func": { "_type": "Attribute", "attr": "add", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 9, "end_lineno": 30, "lineno": 30, "value": { "_type": "Name", "col_offset": 0, "ctx": { "_type": "Load" }, "end_col_offset": 5, "end_lineno": 30, "id": "model", "lineno": 30 } }, "keywords": [], "lineno": 30 } } ], "type_ignores": [] }'.

	module := model first.
	self assert: module class equals: PythonASTModule.
	self assert: module name equals: 'sample.json'.
	self assert: module lineNumber equals: 0
]

{ #category : #parsing }
PythonASTVisitorTest >> testvisitArg [

	| model module args |
	model := self parse:
		         '{ "_type": "Module", "body": [ { "_type": "Import", "col_offset": 0, "end_col_offset": 21, "end_lineno": 1, "lineno": 1, "names": [ { "_type": "alias", "asname": "conv", "col_offset": 7, "end_col_offset": 21, "end_lineno": 1, "lineno": 1, "name": "conv2D" } ] }, { "_type": "ImportFrom", "col_offset": 0, "end_col_offset": 35, "end_lineno": 2, "level": 0, "lineno": 2, "module": "keras.models", "names": [ { "_type": "alias", "asname": null, "col_offset": 25, "end_col_offset": 35, "end_lineno": 2, "lineno": 2, "name": "Sequential" } ] }, { "_type": "FunctionDef", "args": { "_type": "arguments", "args": [ { "_type": "arg", "annotation": null, "arg": "test2", "col_offset": 11, "end_col_offset": 16, "end_lineno": 4, "lineno": 4, "type_comment": null } ], "defaults": [], "kw_defaults": [], "kwarg": null, "kwonlyargs": [], "posonlyargs": [], "vararg": null }, "body": [ { "_type": "Expr", "col_offset": 4, "end_col_offset": 19, "end_lineno": 5, "lineno": 5, "value": { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 9, "end_col_offset": 12, "end_lineno": 5, "kind": null, "lineno": 5, "n": 256, "s": 256, "value": 256 }, { "_type": "Constant", "col_offset": 14, "end_col_offset": 15, "end_lineno": 5, "kind": null, "lineno": 5, "n": 3, "s": 3, "value": 3 }, { "_type": "Constant", "col_offset": 17, "end_col_offset": 18, "end_lineno": 5, "kind": null, "lineno": 5, "n": 3, "s": 3, "value": 3 } ], "col_offset": 4, "end_col_offset": 19, "end_lineno": 5, "func": { "_type": "Name", "col_offset": 4, "ctx": { "_type": "Load" }, "end_col_offset": 8, "end_lineno": 5, "id": "conv", "lineno": 5 }, "keywords": [], "lineno": 5 } }, { "_type": "Assign", "col_offset": 4, "end_col_offset": 24, "end_lineno": 7, "lineno": 7, "targets": [ { "_type": "Name", "col_offset": 4, "ctx": { "_type": "Store" }, "end_col_offset": 9, "end_lineno": 7, "id": "model", "lineno": 7 } ], "type_comment": null, "value": { "_type": "Call", "args": [], "col_offset": 12, "end_col_offset": 24, "end_lineno": 7, "func": { "_type": "Name", "col_offset": 12, "ctx": { "_type": "Load" }, "end_col_offset": 22, "end_lineno": 7, "id": "Sequential", "lineno": 7 }, "keywords": [], "lineno": 7 } } ], "col_offset": 0, "decorator_list": [], "end_col_offset": 24, "end_lineno": 7, "lineno": 4, "name": "sample", "returns": null, "type_comment": null } ], "type_ignores": [] }'.

	module := model first.

	
	args := model allWithType: PythonASTFunctionDefinition.
	self assert: args size equals: 1.
	self assert: args first parameters first name equals: 'test2'.
]

{ #category : #parsing }
PythonASTVisitorTest >> testvisitArguments [

	| model module args arguments |
	model := self parse:
		         '{ "_type": "Module", "body": [ { "_type": "Import", "col_offset": 0, "end_col_offset": 21, "end_lineno": 1, "lineno": 1, "names": [ { "_type": "alias", "asname": "conv", "col_offset": 7, "end_col_offset": 21, "end_lineno": 1, "lineno": 1, "name": "conv2D" } ] }, { "_type": "ImportFrom", "col_offset": 0, "end_col_offset": 35, "end_lineno": 2, "level": 0, "lineno": 2, "module": "keras.models", "names": [ { "_type": "alias", "asname": null, "col_offset": 25, "end_col_offset": 35, "end_lineno": 2, "lineno": 2, "name": "Sequential" } ] }, { "_type": "FunctionDef", "args": { "_type": "arguments", "args": [ { "_type": "arg", "annotation": null, "arg": "test2", "col_offset": 11, "end_col_offset": 16, "end_lineno": 4, "lineno": 4, "type_comment": null } ], "defaults": [], "kw_defaults": [], "kwarg": null, "kwonlyargs": [], "posonlyargs": [], "vararg": null }, "body": [ { "_type": "Expr", "col_offset": 4, "end_col_offset": 19, "end_lineno": 5, "lineno": 5, "value": { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 9, "end_col_offset": 12, "end_lineno": 5, "kind": null, "lineno": 5, "n": 256, "s": 256, "value": 256 }, { "_type": "Constant", "col_offset": 14, "end_col_offset": 15, "end_lineno": 5, "kind": null, "lineno": 5, "n": 3, "s": 3, "value": 3 }, { "_type": "Constant", "col_offset": 17, "end_col_offset": 18, "end_lineno": 5, "kind": null, "lineno": 5, "n": 3, "s": 3, "value": 3 } ], "col_offset": 4, "end_col_offset": 19, "end_lineno": 5, "func": { "_type": "Name", "col_offset": 4, "ctx": { "_type": "Load" }, "end_col_offset": 8, "end_lineno": 5, "id": "conv", "lineno": 5 }, "keywords": [], "lineno": 5 } }, { "_type": "Assign", "col_offset": 4, "end_col_offset": 24, "end_lineno": 7, "lineno": 7, "targets": [ { "_type": "Name", "col_offset": 4, "ctx": { "_type": "Store" }, "end_col_offset": 9, "end_lineno": 7, "id": "model", "lineno": 7 } ], "type_comment": null, "value": { "_type": "Call", "args": [], "col_offset": 12, "end_col_offset": 24, "end_lineno": 7, "func": { "_type": "Name", "col_offset": 12, "ctx": { "_type": "Load" }, "end_col_offset": 22, "end_lineno": 7, "id": "Sequential", "lineno": 7 }, "keywords": [], "lineno": 7 } } ], "col_offset": 0, "decorator_list": [], "end_col_offset": 24, "end_lineno": 7, "lineno": 4, "name": "sample", "returns": null, "type_comment": null } ], "type_ignores": [] }'.

	module := model first.

	
	arguments := model allWithType: PythonASTParameter.
	self assert: arguments size equals: 1.
	self assert: arguments first name equals: 'test2'.
]

{ #category : #parsing }
PythonASTVisitorTest >> testvisitAssign [

	| model module assigns |
	model := self parse:
		         '{ "_type": "Module", "body": [ { "_type": "Import", "col_offset": 0, "end_col_offset": 21, "end_lineno": 1, "lineno": 1, "names": [ { "_type": "alias", "asname": "conv", "col_offset": 7, "end_col_offset": 21, "end_lineno": 1, "lineno": 1, "name": "conv2D" } ] }, { "_type": "ImportFrom", "col_offset": 0, "end_col_offset": 35, "end_lineno": 2, "level": 0, "lineno": 2, "module": "keras.models", "names": [ { "_type": "alias", "asname": null, "col_offset": 25, "end_col_offset": 35, "end_lineno": 2, "lineno": 2, "name": "Sequential" } ] }, { "_type": "FunctionDef", "args": { "_type": "arguments", "args": [ { "_type": "arg", "annotation": null, "arg": "test2", "col_offset": 11, "end_col_offset": 16, "end_lineno": 4, "lineno": 4, "type_comment": null } ], "defaults": [], "kw_defaults": [], "kwarg": null, "kwonlyargs": [], "posonlyargs": [], "vararg": null }, "body": [ { "_type": "Expr", "col_offset": 4, "end_col_offset": 19, "end_lineno": 5, "lineno": 5, "value": { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 9, "end_col_offset": 12, "end_lineno": 5, "kind": null, "lineno": 5, "n": 256, "s": 256, "value": 256 }, { "_type": "Constant", "col_offset": 14, "end_col_offset": 15, "end_lineno": 5, "kind": null, "lineno": 5, "n": 3, "s": 3, "value": 3 }, { "_type": "Constant", "col_offset": 17, "end_col_offset": 18, "end_lineno": 5, "kind": null, "lineno": 5, "n": 3, "s": 3, "value": 3 } ], "col_offset": 4, "end_col_offset": 19, "end_lineno": 5, "func": { "_type": "Name", "col_offset": 4, "ctx": { "_type": "Load" }, "end_col_offset": 8, "end_lineno": 5, "id": "conv", "lineno": 5 }, "keywords": [], "lineno": 5 } }, { "_type": "Assign", "col_offset": 4, "end_col_offset": 24, "end_lineno": 7, "lineno": 7, "targets": [ { "_type": "Name", "col_offset": 4, "ctx": { "_type": "Store" }, "end_col_offset": 9, "end_lineno": 7, "id": "model", "lineno": 7 } ], "type_comment": null, "value": { "_type": "Call", "args": [], "col_offset": 12, "end_col_offset": 24, "end_lineno": 7, "func": { "_type": "Name", "col_offset": 12, "ctx": { "_type": "Load" }, "end_col_offset": 22, "end_lineno": 7, "id": "Sequential", "lineno": 7 }, "keywords": [], "lineno": 7 } } ], "col_offset": 0, "decorator_list": [], "end_col_offset": 24, "end_lineno": 7, "lineno": 4, "name": "sample", "returns": null, "type_comment": null } ], "type_ignores": [] }'.

	module := model first.
	self assert: module class equals: PythonASTModule.
	self assert: module name equals: 'sample.json'.
	self assert: module lineNumber equals: 0.
	
	assigns := model allWithType: PythonASTAssign.
	self assert: assigns size equals: 1.
	self assert: assigns first variables first name equals: 'model'.
	self assert: assigns first variables first position equals: 1.
	self assert: assigns first variables first isTuple equals: false.
	
	self assert: assigns first target invocations first class equals: PythonASTInvocation.
	self assert: assigns first target invocations first name equals: 'Sequential'.
	self assert: assigns first target invocations first lineNumber equals: 7.
	
]

{ #category : #parsing }
PythonASTVisitorTest >> testvisitCall [

	| model module assigns calls |
	model := self parse:
		         '{ "_type": "Module", "body": [ { "_type": "Import", "col_offset": 0, "end_col_offset": 21, "end_lineno": 1, "lineno": 1, "names": [ { "_type": "alias", "asname": "conv", "col_offset": 7, "end_col_offset": 21, "end_lineno": 1, "lineno": 1, "name": "conv2D" } ] }, { "_type": "ImportFrom", "col_offset": 0, "end_col_offset": 35, "end_lineno": 2, "level": 0, "lineno": 2, "module": "keras.models", "names": [ { "_type": "alias", "asname": null, "col_offset": 25, "end_col_offset": 35, "end_lineno": 2, "lineno": 2, "name": "Sequential" } ] }, { "_type": "FunctionDef", "args": { "_type": "arguments", "args": [ { "_type": "arg", "annotation": null, "arg": "test2", "col_offset": 11, "end_col_offset": 16, "end_lineno": 4, "lineno": 4, "type_comment": null } ], "defaults": [], "kw_defaults": [], "kwarg": null, "kwonlyargs": [], "posonlyargs": [], "vararg": null }, "body": [ { "_type": "Expr", "col_offset": 4, "end_col_offset": 19, "end_lineno": 5, "lineno": 5, "value": { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 9, "end_col_offset": 12, "end_lineno": 5, "kind": null, "lineno": 5, "n": 256, "s": 256, "value": 256 }, { "_type": "Constant", "col_offset": 14, "end_col_offset": 15, "end_lineno": 5, "kind": null, "lineno": 5, "n": 3, "s": 3, "value": 3 }, { "_type": "Constant", "col_offset": 17, "end_col_offset": 18, "end_lineno": 5, "kind": null, "lineno": 5, "n": 3, "s": 3, "value": 3 } ], "col_offset": 4, "end_col_offset": 19, "end_lineno": 5, "func": { "_type": "Name", "col_offset": 4, "ctx": { "_type": "Load" }, "end_col_offset": 8, "end_lineno": 5, "id": "conv", "lineno": 5 }, "keywords": [], "lineno": 5 } }, { "_type": "Assign", "col_offset": 4, "end_col_offset": 24, "end_lineno": 7, "lineno": 7, "targets": [ { "_type": "Name", "col_offset": 4, "ctx": { "_type": "Store" }, "end_col_offset": 9, "end_lineno": 7, "id": "model", "lineno": 7 } ], "type_comment": null, "value": { "_type": "Call", "args": [], "col_offset": 12, "end_col_offset": 24, "end_lineno": 7, "func": { "_type": "Name", "col_offset": 12, "ctx": { "_type": "Load" }, "end_col_offset": 22, "end_lineno": 7, "id": "Sequential", "lineno": 7 }, "keywords": [], "lineno": 7 } } ], "col_offset": 0, "decorator_list": [], "end_col_offset": 24, "end_lineno": 7, "lineno": 4, "name": "sample", "returns": null, "type_comment": null } ], "type_ignores": [] }'.

	module := model first.
	self assert: module class equals: PythonASTModule.
	self assert: module name equals: 'sample.json'.
	self assert: module lineNumber equals: 0.
	
	calls := model allWithType: PythonASTInvocation.
	self assert: calls size equals: 2.
	self assert: calls first name equals: 'conv'.
	self assert: calls first lineNumber equals: 5.
	self assert: calls second name equals: 'Sequential'.
]

{ #category : #parsing }
PythonASTVisitorTest >> testvisitName [

	| model module assigns |
	model := self parse:
		         '{ "_type": "Module", "body": [ { "_type": "Import", "col_offset": 0, "end_col_offset": 21, "end_lineno": 1, "lineno": 1, "names": [ { "_type": "alias", "asname": "conv", "col_offset": 7, "end_col_offset": 21, "end_lineno": 1, "lineno": 1, "name": "conv2D" } ] }, { "_type": "ImportFrom", "col_offset": 0, "end_col_offset": 35, "end_lineno": 2, "level": 0, "lineno": 2, "module": "keras.models", "names": [ { "_type": "alias", "asname": null, "col_offset": 25, "end_col_offset": 35, "end_lineno": 2, "lineno": 2, "name": "Sequential" } ] }, { "_type": "FunctionDef", "args": { "_type": "arguments", "args": [ { "_type": "arg", "annotation": null, "arg": "test2", "col_offset": 11, "end_col_offset": 16, "end_lineno": 4, "lineno": 4, "type_comment": null } ], "defaults": [], "kw_defaults": [], "kwarg": null, "kwonlyargs": [], "posonlyargs": [], "vararg": null }, "body": [ { "_type": "Expr", "col_offset": 4, "end_col_offset": 19, "end_lineno": 5, "lineno": 5, "value": { "_type": "Call", "args": [ { "_type": "Constant", "col_offset": 9, "end_col_offset": 12, "end_lineno": 5, "kind": null, "lineno": 5, "n": 256, "s": 256, "value": 256 }, { "_type": "Constant", "col_offset": 14, "end_col_offset": 15, "end_lineno": 5, "kind": null, "lineno": 5, "n": 3, "s": 3, "value": 3 }, { "_type": "Constant", "col_offset": 17, "end_col_offset": 18, "end_lineno": 5, "kind": null, "lineno": 5, "n": 3, "s": 3, "value": 3 } ], "col_offset": 4, "end_col_offset": 19, "end_lineno": 5, "func": { "_type": "Name", "col_offset": 4, "ctx": { "_type": "Load" }, "end_col_offset": 8, "end_lineno": 5, "id": "conv", "lineno": 5 }, "keywords": [], "lineno": 5 } }, { "_type": "Assign", "col_offset": 4, "end_col_offset": 24, "end_lineno": 7, "lineno": 7, "targets": [ { "_type": "Name", "col_offset": 4, "ctx": { "_type": "Store" }, "end_col_offset": 9, "end_lineno": 7, "id": "model", "lineno": 7 } ], "type_comment": null, "value": { "_type": "Call", "args": [], "col_offset": 12, "end_col_offset": 24, "end_lineno": 7, "func": { "_type": "Name", "col_offset": 12, "ctx": { "_type": "Load" }, "end_col_offset": 22, "end_lineno": 7, "id": "Sequential", "lineno": 7 }, "keywords": [], "lineno": 7 } } ], "col_offset": 0, "decorator_list": [], "end_col_offset": 24, "end_lineno": 7, "lineno": 4, "name": "sample", "returns": null, "type_comment": null } ], "type_ignores": [] }'.

	module := model first.
	
	assigns := model allWithType: PythonASTAssign.
	self assert: assigns first variables first name equals: 'model'.
	self assert: assigns first target invocations first name equals: 'Sequential'.
	
]
